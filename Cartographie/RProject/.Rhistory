shiny::runApp()
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
help(setNames)
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
View(db)
View(database)
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
View(database)
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
source('~/GitHub/SpatialMedia/Cartographie/RProject/App.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/App.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/App.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/App.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/App.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/App.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/App.R')
runApp()
runApp()
runApp()
runApp()
runApp()
print(diamonds)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
runApp()
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('test.R')
runApp('test.R')
install.packages("scatterD3")
source('~/GitHub/SpatialMedia/Cartographie/RProject/ui.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
runApp()
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
runApp()
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
runApp()
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
runApp()
shiny::runApp()
shiny::runApp()
scatterD3(x = data()[,input$scatterD3_x],
y = data()[,input$scatterD3_y],
lab = data()[,"Oeuvres"],
xlab = input$scatterD3_x,
ylab = input$scatterD3_y,
x_log = input$scatterD3_x_log,
y_log = input$scatterD3_y_log,
tooltip_text =  paste(
"Timestamp : ",data()[,"Timestamp"],"<br />",
"Time : ",data()[,"Time"],"<br />",
"Auteur : ",data()[,"Auteur"],"<br />",
"Auteur : ",data()[,"Auteur"],"<br />",
"Auteur : ",data()[,"Auteur"],"<br />",
"Auteur : ",data()[,"Auteur"],"<br />",
"Date : ",data()[,"Date"],"<br />",
"Immersion : ",data()[,"Immersion"],"<br />",
"Libertee_action : ",data()[,"Libertee_action"],"<br />",
"Libertee_perception : ",data()[,"Libertee_perception"],"<br />",
"Socialisation : ",data()[,"Socialisation"],"<br />",
"Peripherique_entree : ",numToDeviceIn(data()[,"Peripherique_entree"]),"<br />",
"Peripherique_sortie : ",numToDeviceOut(data()[,"Peripherique_sortie"]),"<br />" ),
col_var = col_var,
col_lab = input$scatterD3_col,
ellipses = input$scatterD3_ellipses,
ellipses_level = input$scatterD3_ellipses_level,
symbol_var = symbol_var,
symbol_lab = input$scatterD3_symbol,
size_var = size_var,
size_lab = input$scatterD3_size,
url_var = data()[,"URL"],
key_var = rownames(data()),
point_opacity = input$scatterD3_opacity,
labels_size = input$scatterD3_labsize,
transitions = input$scatterD3_transitions,
left_margin = 90,
lines = lines(),
lasso = TRUE,
caption = list(title = "Sample scatterD3 shiny app",
subtitle = "A sample application to show animated transitions",
text = "Yep, you can even use <strong>markup</strong> in caption text. <em>Incredible</em>, isn't it ?"),
lasso_callback = "function(sel) {alert(sel.data().map(function(d) {return d.lab}).join('\\n'));}")
output$scatterPlot <- renderScatterD3({
col_var <- if (input$scatterD3_col == "None") NULL else data()[,input$scatterD3_col]
symbol_var <- if (input$scatterD3_symbol == "None") NULL else data()[,input$scatterD3_symbol]
size_var <- if (input$scatterD3_size == "None") NULL else data()[,input$scatterD3_size]
scatterD3(x = data()[,input$scatterD3_x],
y = data()[,input$scatterD3_y],
lab = data()[,"Oeuvres"],
xlab = input$scatterD3_x,
ylab = input$scatterD3_y,
x_log = input$scatterD3_x_log,
y_log = input$scatterD3_y_log,
tooltip_text =  paste(
"Timestamp : ",data()[,"Timestamp"],"<br />",
"Time : ",data()[,"Time"],"<br />",
"Auteur : ",data()[,"Auteur"],"<br />",
"Auteur : ",data()[,"Auteur"],"<br />",
"Auteur : ",data()[,"Auteur"],"<br />",
"Auteur : ",data()[,"Auteur"],"<br />",
"Date : ",data()[,"Date"],"<br />",
"Immersion : ",data()[,"Immersion"],"<br />",
"Libertee_action : ",data()[,"Libertee_action"],"<br />",
"Libertee_perception : ",data()[,"Libertee_perception"],"<br />",
"Socialisation : ",data()[,"Socialisation"],"<br />",
"Peripherique_entree : ",numToDeviceIn(data()[,"Peripherique_entree"]),"<br />",
"Peripherique_sortie : ",numToDeviceOut(data()[,"Peripherique_sortie"]),"<br />" ),
col_var = col_var,
col_lab = input$scatterD3_col,
ellipses = input$scatterD3_ellipses,
ellipses_level = input$scatterD3_ellipses_level,
symbol_var = symbol_var,
symbol_lab = input$scatterD3_symbol,
size_var = size_var,
size_lab = input$scatterD3_size,
url_var = data()[,"URL"],
key_var = rownames(data()),
point_opacity = input$scatterD3_opacity,
labels_size = input$scatterD3_labsize,
transitions = input$scatterD3_transitions,
left_margin = 90,
lines = lines(),
lasso = TRUE,
caption = list(title = "Sample scatterD3 shiny app",
subtitle = "A sample application to show animated transitions",
text = "Yep, you can even use <strong>markup</strong> in caption text. <em>Incredible</em>, isn't it ?"),
lasso_callback = "function(sel) {alert(sel.data().map(function(d) {return d.lab}).join('\\n'));}")
"Auteur : ",data()[,"Auteur"],"<br />", })
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
database <- fillDatabase("Synthèse Questionnaire Cartographie 2019 - light.csv")
View(database)
database <- fillDatabase("Synthèse Questionnaire Cartographie 2019 - light.csv")
View(database)
database$Auttthor                     <- db[1:nrow(db),3]
fillDatabase <- function(dbName){
db <- read.csv(dbName,sep=",", header = T, fill = T)
database <- data.frame(matrix(nrow = nrow(db), ncol = 10))
colnames(database) <- c("Timestamp",
"Time",
"Author of this form"	,
"Title of the work")
database$Timestamp                  <- db[1:nrow(db),1]
database$Time                   <- db[1:nrow(db),2]
database$Auttthor                     <- db[1:nrow(db),3]
database$Title                <- db[1:nrow(db),4]
return(database)
}
numToDeviceIn <- function(ns){
l <- list()
for(n in ns){
if(n == 1) l <- c(l,"Tactile")
else if(n == 2) l <- c(l,"Clavier/Souris")
else if(n == 3) l <- c(l,"Mouvement")
else if(n == 4) l <- c(l,"Son")
else if(n == 5) l <- c(l,"Aucun")
}
return(l)
}
numToDeviceOut <- function(ns){
l <- list()
for(n in ns){
if(n == 1) l <- c(l,"Ecran portable")
else if(n == 2) l <- c(l,"Ecran ordinateur/TV")
else if(n == 3) l <- c(l,"Casque VR")
else if(n == 4) l <- c(l,"Ecran Projection")
else if(n == 5) l <- c(l,"Ecouteurs")
}
return(l)
}
database <- fillDatabase("Synthèse Questionnaire Cartographie 2019 - light.csv")
View(database)
runApp()
runApp()
runApp()
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
runApp()
runApp()
runApp()
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
runApp()
runApp()
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("scatterD3")
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
runApp()
runApp()
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
runApp()
runApp()
runApp()
database <- fillDatabase("Synthèse Questionnaire Cartographie 2019 - light.csv")
View(database)
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
runApp()
install.packages("stringr")
runApp()
runApp()
runApp()
runApp()
db <- fillDatabase("Synthèse Questionnaire Cartographie 2019 - light.csv")
runApp()
runApp()
runApp()
install.packages(c("assertthat", "BH", "cli", "colorspace", "curl", "data.table", "digest", "dplyr", "ggplot2", "glue", "gtable", "hexbin", "httpuv", "httr", "jsonlite", "later", "lazyeval", "mime", "openssl", "pillar", "plotly", "purrr", "quantmod", "R6", "Rcpp", "rlang", "shiny", "stringi", "tibble", "tidyr", "xtable", "xts", "zoo"))
install.packages(c("assertthat", "BH", "cli", "colorspace", "curl", "data.table", "digest", "dplyr", "ggplot2", "glue", "gtable", "hexbin", "httpuv", "httr", "jsonlite", "later", "lazyeval", "mime", "openssl", "pillar", "plotly", "purrr", "quantmod", "R6", "Rcpp", "rlang", "shiny", "stringi", "tibble", "tidyr", "xtable", "xts", "zoo"))
install.packages(c("assertthat", "BH", "cli", "colorspace", "curl", "data.table", "digest", "dplyr", "ggplot2", "glue", "gtable", "hexbin", "httpuv", "httr", "jsonlite", "later", "lazyeval", "mime", "openssl", "pillar", "plotly", "purrr", "quantmod", "R6", "Rcpp", "rlang", "shiny", "stringi", "tibble", "tidyr", "xtable", "xts", "zoo"))
install.packages(c("assertthat", "BH", "cli", "colorspace", "curl", "data.table", "digest", "dplyr", "ggplot2", "glue", "gtable", "hexbin", "httpuv", "httr", "jsonlite", "later", "lazyeval", "mime", "openssl", "pillar", "plotly", "purrr", "quantmod", "R6", "Rcpp", "rlang", "shiny", "stringi", "tibble", "tidyr", "xtable", "xts", "zoo"))
install.packages(c("assertthat", "BH", "cli", "colorspace", "curl", "data.table", "digest", "dplyr", "ggplot2", "glue", "gtable", "hexbin", "httpuv", "httr", "jsonlite", "later", "lazyeval", "mime", "openssl", "pillar", "plotly", "purrr", "quantmod", "R6", "Rcpp", "rlang", "shiny", "stringi", "tibble", "tidyr", "xtable", "xts", "zoo"))
install.packages(c("assertthat", "BH", "cli", "colorspace", "curl", "data.table", "digest", "dplyr", "ggplot2", "glue", "gtable", "hexbin", "httpuv", "httr", "jsonlite", "later", "lazyeval", "mime", "openssl", "pillar", "plotly", "purrr", "quantmod", "R6", "Rcpp", "rlang", "shiny", "stringi", "tibble", "tidyr", "xtable", "xts", "zoo"))
install.packages(c("assertthat", "BH", "cli", "colorspace", "curl", "data.table", "digest", "dplyr", "ggplot2", "glue", "gtable", "hexbin", "httpuv", "httr", "jsonlite", "later", "lazyeval", "mime", "openssl", "pillar", "plotly", "purrr", "quantmod", "R6", "Rcpp", "rlang", "shiny", "stringi", "tibble", "tidyr", "xtable", "xts", "zoo"))
install.packages("shiny")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
runApp()
runApp()
runApp()
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
runApp()
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
db <- fillDatabase("Synthèse Questionnaire Cartographie 2019 - light.csv")
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
db <- fillDatabase("Synthèse Questionnaire Cartographie 2019 - light.csv")
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
db <- fillDatabase("Synthèse Questionnaire Cartographie 2019 - light.csv")
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
db <- fillDatabase("Synthèse Questionnaire Cartographie 2019 - light.csv")
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
db <- fillDatabase("Synthèse Questionnaire Cartographie 2019 - light.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
runApp()
runApp()
runApp()
db <- fillDatabase("Synthèse Questionnaire Cartographie 2019 - light.csv")
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
runApp()
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
db <- fillDatabase("Synthèse Questionnaire Cartographie 2019 - light.csv")
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
db <- fillDatabase("Synthèse Questionnaire Cartographie 2019 - light.csv")
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
runApp()
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
source('~/GitHub/SpatialMedia/Cartographie/RProject/inprogress.R')
